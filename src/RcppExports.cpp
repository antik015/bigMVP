// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bigMVP
List bigMVP(arma::mat Y, arma::mat X, double prior_var, int max_it, double epsilon, int m);
RcppExport SEXP _bigMVP_bigMVP(SEXP YSEXP, SEXP XSEXP, SEXP prior_varSEXP, SEXP max_itSEXP, SEXP epsilonSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var(prior_varSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(bigMVP(Y, X, prior_var, max_it, epsilon, m));
    return rcpp_result_gen;
END_RCPP
}
// bigMVP_lkj
List bigMVP_lkj(arma::mat Y, arma::mat X, double prior_var, int max_it, double epsilon, int m, double nu_lkj);
RcppExport SEXP _bigMVP_bigMVP_lkj(SEXP YSEXP, SEXP XSEXP, SEXP prior_varSEXP, SEXP max_itSEXP, SEXP epsilonSEXP, SEXP mSEXP, SEXP nu_lkjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var(prior_varSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type nu_lkj(nu_lkjSEXP);
    rcpp_result_gen = Rcpp::wrap(bigMVP_lkj(Y, X, prior_var, max_it, epsilon, m, nu_lkj));
    return rcpp_result_gen;
END_RCPP
}
// bigMVPh
List bigMVPh(arma::mat Y, arma::mat X, arma::vec eta0, double nu0, double gamma0, arma::mat Lambda0, double eta0_rho, double nu0_rho, double gamma0_rho, double lambda0_sq_rho, int max_it, double epsilon, int m, int nmcmc, int burnin);
RcppExport SEXP _bigMVP_bigMVPh(SEXP YSEXP, SEXP XSEXP, SEXP eta0SEXP, SEXP nu0SEXP, SEXP gamma0SEXP, SEXP Lambda0SEXP, SEXP eta0_rhoSEXP, SEXP nu0_rhoSEXP, SEXP gamma0_rhoSEXP, SEXP lambda0_sq_rhoSEXP, SEXP max_itSEXP, SEXP epsilonSEXP, SEXP mSEXP, SEXP nmcmcSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda0(Lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type eta0_rho(eta0_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type nu0_rho(nu0_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type gamma0_rho(gamma0_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0_sq_rho(lambda0_sq_rhoSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nmcmc(nmcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(bigMVPh(Y, X, eta0, nu0, gamma0, Lambda0, eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho, max_it, epsilon, m, nmcmc, burnin));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _bigMVP_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _bigMVP_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _bigMVP_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _bigMVP_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bigMVP_bigMVP", (DL_FUNC) &_bigMVP_bigMVP, 6},
    {"_bigMVP_bigMVP_lkj", (DL_FUNC) &_bigMVP_bigMVP_lkj, 7},
    {"_bigMVP_bigMVPh", (DL_FUNC) &_bigMVP_bigMVPh, 15},
    {"_bigMVP_rcpparma_hello_world", (DL_FUNC) &_bigMVP_rcpparma_hello_world, 0},
    {"_bigMVP_rcpparma_outerproduct", (DL_FUNC) &_bigMVP_rcpparma_outerproduct, 1},
    {"_bigMVP_rcpparma_innerproduct", (DL_FUNC) &_bigMVP_rcpparma_innerproduct, 1},
    {"_bigMVP_rcpparma_bothproducts", (DL_FUNC) &_bigMVP_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bigMVP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
